#include <iostream>
#include <string>
using namespace std;

string generateKey(string text, string key) {
    int x = text.length();

    for (int i = 0; ; i++) {
        if (key.length() == text.length())
            break;
        key.push_back(key[i % key.length()]);
    }
    return key;
}

string encrypt(string text, string key) {
    string cipher_text;

    for (int i = 0; i < text.length(); i++) {
        char x = ((text[i] - 'A') + (key[i] - 'A')) % 26 + 'A';
        cipher_text.push_back(x);
    }
    return cipher_text;
}

string decrypt(string cipher_text, string key) {
    string orig_text;

    for (int i = 0; i < cipher_text.length(); i++) {
        char x = ((cipher_text[i] - 'A') - (key[i] - 'A') + 26) % 26 + 'A';
        orig_text.push_back(x);
    }
    return orig_text;
}

int main() {
    string text, keyword;

    cout << "Enter the plaintext (uppercase only, no spaces): ";
    cin >> text;

    cout << "Enter the keyword (uppercase only, no spaces): ";
    cin >> keyword;

    string key = generateKey(text, keyword);
    string encrypted_text = encrypt(text, key);
    string decrypted_text = decrypt(encrypted_text, key);

    cout << "\nGenerated Key: " << key << endl;
    cout << "Encrypted Text: " << encrypted_text << endl;
    cout << "Decrypted Text: " << decrypted_text << endl;

    return 0;
}


